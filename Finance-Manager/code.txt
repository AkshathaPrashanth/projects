home.html

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Finance Manager - Expense Tracker</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<link rel="manifest" href="/manifest.json">
<meta name="theme-color" content="#667eea">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<meta name="apple-mobile-web-app-title" content="Finance Manager">
<link rel="apple-touch-icon" href="/icons/icon-192x192.png">
<script src="/app.js"></script>

<style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
}

/* Navigation Bar */
.navbar {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    padding: 1rem 2rem;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
}

.nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
    text-decoration: none;
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-links a {
    color: white;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.nav-links a:hover,
.nav-links a.active {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
}

.mobile-menu-btn {
    display: none;
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
}

/* Main Content */
.main-content {
    margin-top: 70px;
    margin-bottom: 80px;
    padding: 2rem;
}

.bg-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

/* Note Area */
.note-area {
    max-width: 600px;
    margin: 0 auto 2rem;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 1.5rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.note-container {
    max-height: 200px;
    overflow-y: auto;
    margin-bottom: 1rem;
}

.note-ui {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.note-dropdown {
    background: #667eea;
    color: white;
    border: none;
    padding: 0.75rem;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
}

.note-dropdown:hover {
    background: #5a67d8;
    transform: translateY(-2px);
}

.description-input {
    flex: 1;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.3s ease;
}

.description-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

/* Category Buttons */
.buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
}

.buttonsSC {
    display: none;
}

.buttons button {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    padding: 1rem 1.5rem;
    border-radius: 15px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
    color: #333;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.buttons button:hover {
    background: white;
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.buttons button.active {
    background: #667eea;
    color: white;
}

.buttonsSC button {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    padding: 1rem;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    color: #333;
}

.buttonsSC button:hover {
    background: white;
    transform: translateY(-3px);
}

.buttonsSC button.active {
    background: #667eea;
    color: white;
}

/* Input Container */
.input-container {
    display: flex;
    gap: 1rem;
    max-width: 600px;
    margin: 0 auto 2rem;
    background: rgba(255, 255, 255, 0.95);
    padding: 1.5rem;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.plus-button {
    background: #48bb78;
    color: white;
    border: none;
    padding: 1rem;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
}

.plus-button:hover {
    background: #38a169;
    transform: scale(1.1);
}

.amount-input {
    width: 120px;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 1rem;
    font-weight: 600;
}

.amount-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

/* Items Container */
.items-container {
    max-width: 800px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 1.5rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    min-height: 200px;
}

.expense-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    margin-bottom: 0.5rem;
    background: #f8fafc;
    border-radius: 10px;
    border-left: 4px solid #667eea;
}

.expense-item .description {
    font-weight: 600;
    color: #333;
}

.expense-item .amount {
    font-weight: 700;
    color: #e53e3e;
}

.expense-item .category {
    background: #667eea;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
}

.delete-btn {
    background: #e53e3e;
    color: white;
    border: none;
    padding: 0.5rem;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.delete-btn:hover {
    background: #c53030;
    transform: scale(1.1);
}

/* Summary */
.summary {
    text-align: center;
    margin-top: 1rem;
    padding: 1rem;
    background: rgba(102, 126, 234, 0.1);
    border-radius: 10px;
}

.summary h3 {
    color: #667eea;
    margin-bottom: 0.5rem;
}

.summary .total-amount {
    font-size: 1.5rem;
    font-weight: 700;
    color: #e53e3e;
}

/* Notification */
.notification {
    position: fixed;
    top: 100px;
    right: 20px;
    background: #48bb78;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    transform: translateX(400px);
    transition: all 0.3s ease;
    z-index: 1001;
}

.notification.show {
    transform: translateX(0);
}

/* Bottom Navigation */
.bottom-nav {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    padding: 1rem;
    z-index: 1000;
}

.nav-container-bottom {
    display: flex;
    justify-content: space-around;
    max-width: 400px;
    margin: 0 auto;
}

.nav-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-decoration: none;
    color: #666;
    transition: all 0.3s ease;
    padding: 0.5rem;
    border-radius: 10px;
    min-width: 80px;
}

.nav-item:hover,
.nav-item.active {
    color: #667eea;
    background: rgba(102, 126, 234, 0.1);
    transform: translateY(-2px);
}

.nav-item i {
    font-size: 1.5rem;
    margin-bottom: 0.25rem;
}

.nav-item span {
    font-size: 0.8rem;
    font-weight: 600;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
    .nav-links {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        flex-direction: column;
        padding: 1rem;
        gap: 0;
    }

    .nav-links.active {
        display: flex;
    }

    .mobile-menu-btn {
        display: block;
    }

    .main-content {
        padding: 1rem;
    }

    .buttons {
        display: none;
    }

    .buttonsSC {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
    }

    .input-container {
        flex-direction: column;
        gap: 1rem;
    }

    .amount-input {
        width: 100%;
    }

    .expense-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .expense-item .amount {
        align-self: flex-end;
    }
}
</style>
</head>
<body>
<!-- Top Header -->
<div style="background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); padding: 1rem; text-align: center; position: fixed; top: 0; left: 0; right: 0; z-index: 1000;">
    <h1 style="color: white; margin: 0; font-size: 1.5rem; font-weight: bold;">
        <i class="fa-solid fa-list"></i> Expense Tracker
    </h1>
</div>

<div class="bg-container"></div>

<main class="main-content">
    <!-- Note Area -->
    <div class="note-area">
        <div class="note-container" id="noteContainer">
            <p style="text-align: center; color: #666; font-style: italic;">No notes yet. Add your first note below!</p>
        </div>
        <div class="note-ui">
            <select class="note-dropdown" id="noteDropdown">
                <option value="general">üìù General</option>
                <option value="reminder">‚è∞ Reminder</option>
                <option value="goal">üéØ Goal</option>
                <option value="tip">üí° Tip</option>
            </select>
            <input type="text" class="description-input" id="noteInput" placeholder="Add a note...">
            <button class="plus-button" onclick="addNote()">
                <i class="fa-solid fa-plus"></i>
            </button>
        </div>
    </div>

    <!-- Category Buttons (Desktop) -->
    <div class="buttons">
        <button onclick="setCategory('food')" id="foodBtn">
            <i class="fa-solid fa-utensils"></i> Food
        </button>
        <button onclick="setCategory('transport')" id="transportBtn">
            <i class="fa-solid fa-car"></i> Transport
        </button>
        <button onclick="setCategory('entertainment')" id="entertainmentBtn">
            <i class="fa-solid fa-gamepad"></i> Entertainment
        </button>
        <button onclick="setCategory('shopping')" id="shoppingBtn">
            <i class="fa-solid fa-shopping-bag"></i> Shopping
        </button>
        <button onclick="setCategory('bills')" id="billsBtn">
            <i class="fa-solid fa-file-invoice"></i> Bills
        </button>
        <button onclick="setCategory('other')" id="otherBtn">
            <i class="fa-solid fa-ellipsis"></i> Other
        </button>
    </div>

    <!-- Category Buttons (Mobile) -->
    <div class="buttonsSC">
        <button onclick="setCategory('food')" id="foodBtnSC" title="Food">
            <i class="fa-solid fa-utensils"></i>
        </button>
        <button onclick="setCategory('transport')" id="transportBtnSC" title="Transport">
            <i class="fa-solid fa-car"></i>
        </button>
        <button onclick="setCategory('entertainment')" id="entertainmentBtnSC" title="Entertainment">
            <i class="fa-solid fa-gamepad"></i>
        </button>
        <button onclick="setCategory('shopping')" id="shoppingBtnSC" title="Shopping">
            <i class="fa-solid fa-shopping-bag"></i>
        </button>
        <button onclick="setCategory('bills')" id="billsBtnSC" title="Bills">
            <i class="fa-solid fa-file-invoice"></i>
        </button>
        <button onclick="setCategory('other')" id="otherBtnSC" title="Other">
            <i class="fa-solid fa-ellipsis"></i>
        </button>
    </div>

    <!-- Input Container -->
    <div class="input-container">
        <input type="number" class="amount-input" id="amountInput" placeholder="Amount ‚Çπ" step="0.01">
        <input type="text" class="description-input" id="descriptionInput" placeholder="Description...">
        <button class="plus-button" onclick="addExpense()">
            <i class="fa-solid fa-plus"></i>
        </button>
    </div>

    <!-- Items Container -->
    <div class="items-container">
        <div id="expensesList">
            <p style="text-align: center; color: #666; font-style: italic; margin-top: 2rem;">
                No expenses added yet. Add your first expense above!
            </p>
        </div>
        <div class="summary" id="summary" style="display: none;">
            <h3>Total Expenses</h3>
            <div class="total-amount" id="totalAmount">‚Çπ 0</div>
        </div>
    </div>
</main>

<!-- Bottom Navigation -->
<nav class="bottom-nav">
    <div class="nav-container-bottom">
        <a href="splitter.html" class="nav-item active">
            <i class="fa-solid fa-list"></i>
            <span>Tracker</span>
        </a>
        <a href="splitter.html" onclick="navigateToBudget()" class="nav-item">
            <i class="fa-solid fa-chart-pie"></i>
            <span>Budget</span>
        </a>
    </div>
</nav>

<!-- Notification -->
<div class="notification" id="notification">
    <span id="notificationText">Expense added successfully!</span>
</div>
-->
<!--<script>
let selectedCategory = 'food';
let expenses = [];
let notes = [];

// Navigation functionality
function navigateToBudget() {
    alert('Navigating to Budget Planner...');
    // window.location.href = 'budget.html';
}

// Category selection
function setCategory(category) {
    selectedCategory = category;
    
    // Update desktop buttons
    document.querySelectorAll('.buttons button').forEach(btn => {
        btn.classList.remove('active');
    });
    document.getElementById(category + 'Btn').classList.add('active');
    
    // Update mobile buttons
    document.querySelectorAll('.buttonsSC button').forEach(btn => {
        btn.classList.remove('active');
    });
    document.getElementById(category + 'BtnSC').classList.add('active');
}

// Add expense functionality
function addExpense() {
    const amount = parseFloat(document.getElementById('amountInput').value);
    const description = document.getElementById('descriptionInput').value.trim();
    
    if (!amount || amount <= 0) {
        showNotification('Please enter a valid amount!', 'error');
        return;
    }
    
    if (!description) {
        showNotification('Please enter a description!', 'error');
        return;
    }
    
    const expense = {
        id: Date.now(),
        amount: amount,
        description: description,
        category: selectedCategory,
        date: new Date().toLocaleDateString()
    };
    
    expenses.push(expense);
    updateExpensesList();
    updateSummary();
    
    // Clear inputs
    document.getElementById('amountInput').value = '';
    document.getElementById('descriptionInput').value = '';
    
    showNotification('Expense added successfully!', 'success');
}

// Add note functionality
function addNote() {
    const noteText = document.getElementById('noteInput').value.trim();
    const noteType = document.getElementById('noteDropdown').value;
    
    if (!noteText) {
        showNotification('Please enter a note!', 'error');
        return;
    }
    
    const note = {
        id: Date.now(),
        text: noteText,
        type: noteType,
        date: new Date().toLocaleDateString()
    };
    
    notes.push(note);
    updateNotesList();
    
    document.getElementById('noteInput').value = '';
    showNotification('Note added successfully!', 'success');
}

// Update expenses list
function updateExpensesList() {
    const expensesList = document.getElementById('expensesList');
    
    if (expenses.length === 0) {
        expensesList.innerHTML = '<p style="text-align: center; color: #666; font-style: italic; margin-top: 2rem;">No expenses added yet. Add your first expense above!</p>';
        return;
    }
    
    expensesList.innerHTML = expenses.map(expense => `
        <div class="expense-item">
            <div>
                <div class="description">${expense.description}</div>
                <div style="font-size: 0.8rem; color: #666; margin-top: 0.25rem;">${expense.date}</div>
            </div>
            <div style="display: flex; align-items: center; gap: 1rem;">
                <span class="category">${getCategoryIcon(expense.category)} ${expense.category}</span>
                <span class="amount">‚Çπ ${expense.amount.toLocaleString('en-IN')}</span>
                <button class="delete-btn" onclick="deleteExpense(${expense.id})">
                    <i class="fa-solid fa-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
}

// Update notes list
function updateNotesList() {
    const noteContainer = document.getElementById('noteContainer');
    
    if (notes.length === 0) {
        noteContainer.innerHTML = '<p style="text-align: center; color: #666; font-style: italic;">No notes yet. Add your first note below!</p>';
        return;
    }
    
    noteContainer.innerHTML = notes.map(note => `
        <div style="padding: 0.75rem; margin-bottom: 0.5rem; background: #f8fafc; border-radius: 8px; border-left: 3px solid #667eea;">
            <div style="display: flex; justify-content: between; align-items: flex-start; gap: 1rem;">
                <div style="flex: 1;">
                    <div style="font-weight: 600; color: #333;">${getNoteIcon(note.type)} ${note.text}</div>
                    <div style="font-size: 0.8rem; color: #666; margin-top: 0.25rem;">${note.date}</div>
                </div>
                <button onclick="deleteNote(${note.id})" style="background: #e53e3e; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">
                    <i class="fa-solid fa-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
}

// Update summary
function updateSummary() {
    const summary = document.getElementById('summary');
    const totalAmount = document.getElementById('totalAmount');
    
    if (expenses.length === 0) {
        summary.style.display = 'none';
        return;
    }
    
    const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
    totalAmount.textContent = `‚Çπ ${total.toLocaleString('en-IN')}`;
    summary.style.display = 'block';
}

// Delete expense
function deleteExpense(id) {
    expenses = expenses.filter(expense => expense.id !== id);
    updateExpensesList();
    updateSummary();
    showNotification('Expense deleted!', 'success');
}

// Delete note
function deleteNote(id) {
    notes = notes.filter(note => note.id !== id);
    updateNotesList();
    showNotification('Note deleted!', 'success');
}

// Get category icon
function getCategoryIcon(category) {
    const icons = {
        food: 'üçΩÔ∏è',
        transport: 'üöó',
        entertainment: 'üéÆ',
        shopping: 'üõçÔ∏è',
        bills: 'üìÑ',
        other: 'üìù'
    };
    return icons[category] || 'üìù';
}

// Get note icon
function getNoteIcon(type) {
    const icons = {
        general: 'üìù',
        reminder: '‚è∞',
        goal: 'üéØ',
        tip: 'üí°'
    };
    return icons[type] || 'üìù';
}

// Show notification
function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    const notificationText = document.getElementById('notificationText');
    
    notificationText.textContent = message;
    notification.style.background = type === 'error' ? '#e53e3e' : '#48bb78';
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    setCategory('food'); // Set default category
    
    // Add enter key listeners
    document.getElementById('amountInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            document.getElementById('descriptionInput').focus();
        }
    });
    
    document.getElementById('descriptionInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            addExpense();
        }
    });
    
    document.getElementById('noteInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            addNote();
        }
    });
});
</script>-->
<script>
    // Data initialization and persistence functions
function initializeAppData() {
  console.log('Initializing app data...');
  
  // Initialize categoryDataManager if needed
  if (typeof window.categoryDataManager === 'undefined') {
    window.categoryDataManager = new CategoryDataManager();
  }

  // Load expenses from localStorage (category-based flattened list)
  window.expenses = window.categoryDataManager.getAllExpensesFlattened();
  console.log(`Loaded ${window.expenses.length} expenses from localStorage`);

  // Load notes from localStorage
  const notesRaw = localStorage.getItem('financeManagerNotes');
  if (notesRaw) {
    try {
      const notesData = JSON.parse(notesRaw);
      window.notes = notesData.notes || [];
      console.log(`Loaded ${window.notes.length} notes from localStorage`);
    } catch (e) {
      console.error('Error parsing notes from localStorage:', e);
      window.notes = [];
    }
  } else {
    window.notes = [];
  }

  // Update the UI with loaded data
  updateUI();
}

// Function to update all UI components
function updateUI() {
  if (typeof updateExpensesList === 'function') {
    updateExpensesList();
  }
  if (typeof updateNotesList === 'function') {
    updateNotesList();
  }
  if (typeof updateSummary === 'function') {
    updateSummary();
  }
  console.log('UI updated with loaded data');
}

// Updated addExpense function with immediate persistence
function addExpense() {
  const amount = parseFloat(document.getElementById('amountInput').value);
  const description = document.getElementById('descriptionInput').value.trim();
  
  if (!amount || amount <= 0) {
    showNotification('Please enter a valid amount!', 'error');
    return;
  }
  
  if (!description) {
    showNotification('Please enter a description!', 'error');
    return;
  }
  
  const expense = {
    id: Date.now(),
    amount: amount,
    description: description,
    category: selectedCategory,
    date: new Date().toLocaleDateString()
  };
  
  // Save to category-based storage
  window.categoryDataManager.saveExpenseToCategory(expense);
  
  // Immediately reload data and update UI
  initializeAppData();
  
  // Clear inputs
  document.getElementById('amountInput').value = '';
  document.getElementById('descriptionInput').value = '';
  
  showNotification('Expense added successfully!', 'success');
}

// Updated deleteExpense function with immediate persistence
function deleteExpense(id) {
  const deletedFrom = window.categoryDataManager.deleteExpenseFromCategory(id);
  if (deletedFrom) {
    // Immediately reload data and update UI
    initializeAppData();
    showNotification(`Expense deleted from ${deletedFrom}!`, 'success');
  }
}

// Updated addNote function with immediate persistence
function addNote() {
  const noteText = document.getElementById('noteInput').value.trim();
  const noteType = document.getElementById('noteDropdown').value;
  
  if (!noteText) {
    showNotification('Please enter a note!', 'error');
    return;
  }
  
  const note = {
    id: Date.now(),
    text: noteText,
    type: noteType,
    date: new Date().toLocaleDateString(),
    timestamp: Date.now()
  };
  
  // Add to window.notes array
  if (!window.notes) window.notes = [];
  window.notes.push(note);
  
  // Save to localStorage immediately
  const notesData = {
    notes: window.notes,
    timestamp: Date.now(),
    version: '2.0.0'
  };
  localStorage.setItem('financeManagerNotes', JSON.stringify(notesData));
  
  // Update UI
  updateNotesList();
  
  // Clear input
  document.getElementById('noteInput').value = '';
  showNotification('Note added successfully!', 'success');
}

// Updated deleteNote function with immediate persistence
function deleteNote(id) {
  if (!window.notes) window.notes = [];
  
  window.notes = window.notes.filter(note => note.id !== id);
  
  // Save to localStorage immediately
  const notesData = {
    notes: window.notes,
    timestamp: Date.now(),
    version: '2.0.0'
  };
  localStorage.setItem('financeManagerNotes', JSON.stringify(notesData));
  
  // Update UI
  updateNotesList();
  showNotification('Note deleted!', 'success');
}

// Enhanced updateExpensesList function
function updateExpensesList() {
  const expensesList = document.getElementById('expensesList');
  
  if (!window.expenses || window.expenses.length === 0) {
    expensesList.innerHTML = '<p style="text-align: center; color: #666; font-style: italic; margin-top: 2rem;">No expenses added yet. Add your first expense above!</p>';
    return;
  }
  
  // Sort expenses by timestamp (newest first)
  const sortedExpenses = window.expenses.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
  
  expensesList.innerHTML = sortedExpenses.map(expense => `
    <div class="expense-item">
      <div>
        <div class="description">${expense.description}</div>
        <div style="font-size: 0.8rem; color: #666; margin-top: 0.25rem;">${expense.date}</div>
      </div>
      <div style="display: flex; align-items: center; gap: 1rem;">
        <span class="category">${getCategoryIcon(expense.category)} ${expense.category}</span>
        <span class="amount">‚Çπ ${expense.amount.toLocaleString('en-IN')}</span>
        <button class="delete-btn" onclick="deleteExpense(${expense.id})">
          <i class="fa-solid fa-trash"></i>
        </button>
      </div>
    </div>
  `).join('');
}

// Enhanced updateNotesList function
function updateNotesList() {
  const noteContainer = document.getElementById('noteContainer');
  
  if (!window.notes || window.notes.length === 0) {
    noteContainer.innerHTML = '<p style="text-align: center; color: #666; font-style: italic;">No notes yet. Add your first note below!</p>';
    return;
  }
  
  // Sort notes by timestamp (newest first)
  const sortedNotes = window.notes.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
  
  noteContainer.innerHTML = sortedNotes.map(note => `
    <div style="padding: 0.75rem; margin-bottom: 0.5rem; background: #f8fafc; border-radius: 8px; border-left: 3px solid #667eea;">
      <div style="display: flex; justify-content: space-between; align-items: flex-start; gap: 1rem;">
        <div style="flex: 1;">
          <div style="font-weight: 600; color: #333;">${getNoteIcon(note.type)} ${note.text}</div>
          <div style="font-size: 0.8rem; color: #666; margin-top: 0.25rem;">${note.date}</div>
        </div>
        <button onclick="deleteNote(${note.id})" style="background: #e53e3e; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">
          <i class="fa-solid fa-trash"></i>
        </button>
      </div>
    </div>
  `).join('');
}

// Enhanced updateSummary function
function updateSummary() {
  const summary = document.getElementById('summary');
  const totalAmount = document.getElementById('totalAmount');
  
  if (!window.expenses || window.expenses.length === 0) {
    summary.style.display = 'none';
    return;
  }
  
  const total = window.expenses.reduce((sum, expense) => sum + expense.amount, 0);
  totalAmount.textContent = `‚Çπ ${total.toLocaleString('en-IN')}`;
  summary.style.display = 'block';
}

// Category helper functions (if not already present)
function getCategoryIcon(category) {
  const icons = {
    food: 'üçΩÔ∏è',
    transport: 'üöó',
    entertainment: 'üéÆ',
    shopping: 'üõçÔ∏è',
    bills: 'üìÑ',
    other: 'üìù'
  };
  return icons[category] || 'üìù';
}

function getNoteIcon(type) {
  const icons = {
    general: 'üìù',
    reminder: '‚è∞',
    goal: 'üéØ',
    tip: 'üí°'
  };
  return icons[type] || 'üìù';
}
// Enhanced initialization when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, initializing Finance Manager...');
  
  // Initialize PWA Manager first
  const pwaManager = new PWAManager();
  window.pwaManager = pwaManager;
  
  // Initialize app data (load from localStorage)
  initializeAppData();
  
  // Set default category
  setCategory('food');
  
  // Add PWA buttons after a delay
  setTimeout(() => {
    addPWAButtons(pwaManager);
  }, 1000);
  
  // Add enter key listeners for better UX
  document.getElementById('amountInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      document.getElementById('descriptionInput').focus();
    }
  });
  
  document.getElementById('descriptionInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      addExpense();
    }
  });
  
  document.getElementById('noteInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      addNote();
    }
  });
  
  // Setup periodic data sync (every 10 seconds)
  setInterval(() => {
    syncDataWithUI();
  }, 10000);
  
  console.log('Finance Manager initialized successfully');
});

// Function to periodically sync data with UI
function syncDataWithUI() {
  const currentExpenseCount = window.expenses ? window.expenses.length : 0;
  const currentNoteCount = window.notes ? window.notes.length : 0;
  
  // Reload data from localStorage
  const loadedExpenses = window.categoryDataManager.getAllExpensesFlattened();
  const notesRaw = localStorage.getItem('financeManagerNotes');
  let loadedNotes = [];
  
  if (notesRaw) {
    try {
      loadedNotes = JSON.parse(notesRaw).notes || [];
    } catch (e) {
      loadedNotes = [];
    }
  }
  
  // Check if data has changed
  if (loadedExpenses.length !== currentExpenseCount || loadedNotes.length !== currentNoteCount) {
    console.log('Data mismatch detected, syncing UI...');
    initializeAppData();
  }
}

    </script>
</body>
</html>
